{
  "_args": [
    [
      {
        "raw": "electron-builder@^20.28.4",
        "scope": null,
        "escapedName": "electron-builder",
        "name": "electron-builder",
        "rawSpec": "^20.28.4",
        "spec": ">=20.28.4 <21.0.0",
        "type": "range"
      },
      "E:\\work\\yq-hospital\\yq-hospital-admin\\hospital-admin"
    ]
  ],
  "_from": "electron-builder@^20.28.4",
  "_hasShrinkwrap": false,
  "_id": "electron-builder@20.41.0",
  "_location": "/electron-builder",
  "_nodeVersion": "12.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/electron-builder_20.41.0_1557420707556_0.5100703972922258"
  },
  "_npmUser": {
    "name": "develar",
    "email": "develar@gmail.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {
    "ansi-styles": "3.2.1",
    "bluebird-lst": "1.0.8",
    "decamelize": "1.2.0",
    "emoji-regex": "7.0.3",
    "end-of-stream": "1.4.1",
    "fs-extra-p": "7.0.1",
    "is-fullwidth-code-point": "2.0.0",
    "is-stream": "1.1.0",
    "map-age-cleaner": "0.1.3",
    "ms": "2.1.1",
    "nice-try": "1.0.5",
    "npm-run-path": "2.0.2",
    "once": "1.4.0",
    "p-finally": "1.0.0",
    "p-is-promise": "2.1.0",
    "path-exists": "3.0.0",
    "path-key": "2.0.1",
    "require-directory": "2.1.1",
    "sax": "1.2.4",
    "semver": "5.7.0",
    "set-blocking": "2.0.0",
    "shebang-command": "1.2.0",
    "signal-exit": "3.0.2",
    "strip-eof": "1.0.0",
    "which": "1.3.1",
    "which-module": "2.0.0",
    "y18n": "4.0.0"
  },
  "_requested": {
    "raw": "electron-builder@^20.28.4",
    "scope": null,
    "escapedName": "electron-builder",
    "name": "electron-builder",
    "rawSpec": "^20.28.4",
    "spec": ">=20.28.4 <21.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/electron-builder/-/electron-builder-20.41.0.tgz",
  "_shasum": "560b214e6496b0086a605e3d479733bf71333a66",
  "_shrinkwrap": null,
  "_spec": "electron-builder@^20.28.4",
  "_where": "E:\\work\\yq-hospital\\yq-hospital-admin\\hospital-admin",
  "author": {
    "name": "Vladimir Krivosheev"
  },
  "bin": {
    "electron-builder": "./out/cli/cli.js",
    "build": "./out/cli/cli.js",
    "install-app-deps": "./out/cli/install-app-deps.js"
  },
  "bugs": {
    "url": "https://github.com/electron-userland/electron-builder/issues"
  },
  "contributors": [
    {
      "name": "Stefan Judis"
    }
  ],
  "dependencies": {
    "app-builder-lib": "20.41.0",
    "bluebird-lst": "^1.0.7",
    "builder-util": "10.0.0",
    "builder-util-runtime": "8.2.2",
    "chalk": "^2.4.2",
    "dmg-builder": "6.6.2",
    "fs-extra-p": "^7.0.1",
    "is-ci": "^2.0.0",
    "lazy-val": "^1.0.4",
    "read-config-file": "3.2.2",
    "sanitize-filename": "^1.6.1",
    "update-notifier": "^2.5.0",
    "yargs": "^13.2.2"
  },
  "description": "A complete solution to package and build a ready for distribution Electron app for MacOS, Windows and Linux with “auto update” support out of the box",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-NgVD3UKyr9AjKumYeLfdLDmefhXj+XwAXan1CvgfjjiR6IZdh8oPPfpNJvpX3CWJi/aEUfZn0B7PcIzzsZT8FQ==",
    "shasum": "560b214e6496b0086a605e3d479733bf71333a66",
    "tarball": "https://registry.npmjs.org/electron-builder/-/electron-builder-20.41.0.tgz",
    "fileCount": 20,
    "unpackedSize": 77930,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc1FqkCRA9TVsSAnZWagAArUoP/AyssYTD9KRvhvg1dr/Z\nFtvWy11CJKSVGxAu2NYcUrktR6XuKktLuCwYc5+Yup7GYuh2H/rZbl5f81ly\nUv0e5Evtnw0NaD8QUzEWD+bIzfJNy8m831ygfGv73K91M4HeRTIHZsE3ypcd\nHKtqFt8IGNOK4JqHqLX6fU8SC9eilbP/pHsQa7bIMwa8FSqzoKKV1Tp+SRTL\nBlmBQw9E8bgWzNQ1eV2zPLCBuz4CakS9I/svpghVK9yDlNxLxed86niNeCsP\nn2pFBlCdmCVADfiEI0mh4FwXmFDhOFWmY9FaLfSFNVfB+TrRlDaOe8TJ1uTV\nA32SAPWTLxliZDMCp/LpnbobVdwPrclIFrdo0p2NOyrwINE/EfzUDdo92mnC\nBJ4HkZQICzA/Idz/Zwk3tofQ2sljsk4HAfV4RFohSGyA4WJ+U08USKifId3B\nyHHIWTyo2n8x2Ik7P8xTaHO1MayonzfcOAXO+NGOfHl6rB6noj3x/ZHqUAqf\n5QV0kQLWJdkUpSr/s5TiZ7D5gUqOLkFfumxaNK4+5m9Vblh77yKpooMrKqS1\ny491Ad+wp9CNIxqDVv5oRLxNaR3CbempGavkB8qA5yp4p5X4tjMoyROfG+Jf\n4Gh0EZHhJ65nMybRLsHqPUkmdamnzqpR7OXoXtFynCnmjlnN6+PIPiZ76aNu\nWzBQ\r\n=xzit\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=8.12.0"
  },
  "files": [
    "out"
  ],
  "homepage": "https://github.com/electron-userland/electron-builder",
  "keywords": [
    "electron",
    "builder",
    "build",
    "installer",
    "install",
    "packager",
    "pack",
    "nsis",
    "app",
    "dmg",
    "pkg",
    "msi",
    "exe",
    "setup",
    "Windows",
    "OS X",
    "MacOS",
    "Mac",
    "appx",
    "snap",
    "portable"
  ],
  "license": "MIT",
  "main": "out/index.js",
  "maintainers": [
    {
      "name": "develar",
      "email": "develar@gmail.com"
    },
    {
      "name": "stefanjudis",
      "email": "stefanjudis@gmail.com"
    }
  ],
  "name": "electron-builder",
  "optionalDependencies": {},
  "publishConfig": {
    "tag": "next"
  },
  "readme": "# electron-builder [![npm version](https://img.shields.io/npm/v/electron-builder.svg?label=latest)](https://yarn.pm/electron-builder) [![downloads per month](https://img.shields.io/npm/dm/electron-builder.svg)](https://yarn.pm/electron-builder) [![donate](https://img.shields.io/badge/Donate-Donorbox-green.svg)](https://www.electron.build/donate)\nA complete solution to package and build a ready for distribution [Electron](https://electronjs.org), [Proton Native](https://proton-native.js.org/) or [Muon](https://github.com/brave/muon) app for macOS, Windows and Linux with “auto update” support out of the box.\n\nSee documentation on [electron.build](https://www.electron.build).\n\n* NPM packages management:\n    * [Native application dependencies](https://electron.atom.io/docs/tutorial/using-native-node-modules/) compilation (including [Yarn](http://yarnpkg.com/) support).\n    * Development dependencies are never included. You don't need to ignore them explicitly.\n    * [Two package.json structure](https://www.electron.build/tutorials/two-package-structure) is supported, but you are not forced to use it even if you have native production dependencies.\n* [Code Signing](https://www.electron.build/code-signing) on a CI server or development machine.\n* [Auto Update](https://www.electron.build/auto-update) ready application packaging.\n* Numerous target formats:\n    * All platforms: `7z`, `zip`, `tar.xz`, `tar.7z`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir` (unpacked directory).\n    * [macOS](https://www.electron.build/configuration/mac): `dmg`, `pkg`, `mas`.\n    * [Linux](https://www.electron.build/configuration/linux): [AppImage](http://appimage.org), [snap](http://snapcraft.io), debian package (`deb`), `rpm`, `freebsd`, `pacman`, `p5p`, `apk`.\n    * [Windows](https://www.electron.build/configuration/win): `nsis` (Installer), `nsis-web` (Web installer), `portable` (portable app without installation), AppX (Windows Store), MSI, Squirrel.Windows.\n* [Publishing artifacts](https://www.electron.build/configuration/publish) to GitHub Releases, Amazon S3, DigitalOcean Spaces and Bintray.\n* Advanced building:\n    * Pack in a distributable format [already packaged app](https://www.electron.build/#pack-only-in-a-distributable-format).\n    * Separate [build steps](https://github.com/electron-userland/electron-builder/issues/1102#issuecomment-271845854).\n    * Build and publish in parallel, using hard links on CI server to reduce IO and disk space usage.\n    * [electron-compile](https://github.com/electron/electron-compile) support (compile for release-time on the fly on build).\n* [Docker](https://www.electron.build/multi-platform-build#docker) images to build Electron app for Linux or Windows on any platform.\n* [Proton Native](https://www.electron.build/configuration/configuration/#proton-native) and [Muon](https://github.com/brave/muon) support.\n* Downloads all required tools files on demand automatically (e.g. to code sign windows application, to make AppX), no need to setup.\n\n| Question | Answer |\n|----------|-------|\n| “I want to configure electron-builder” | [See options](https://electron.build/configuration/configuration) |\n| “I have a question” | [Open an issue](https://github.com/electron-userland/electron-builder/issues) or [join the chat](https://slackin.electron.build) |\n| “I found a bug” | [Open an issue](https://github.com/electron-userland/electron-builder/issues/new) |\n| “I want to support development” | [Donate](https://www.electron.build/donate) |\n\nReal project example — [onshape-desktop-shell](https://github.com/develar/onshape-desktop-shell).\n\n## Installation\n[Yarn](http://yarnpkg.com/) is [strongly](https://github.com/electron-userland/electron-builder/issues/1147#issuecomment-276284477) recommended instead of npm.\n\n`yarn add electron-builder --dev`\n\n## Quick Setup Guide\n\n[electron-webpack-quick-start](https://github.com/electron-userland/electron-webpack-quick-start) is a recommended way to create a new Electron application. See [Boilerplates](https://www.electron.build/#boilerplates).\n\n1. Specify the standard fields in the application `package.json` — [name](https://electron.build/configuration/configuration#Metadata-name), `description`, `version` and [author](https://docs.npmjs.com/files/package.json#people-fields-author-contributors).\n\n2. Specify the [build](https://electron.build/configuration/configuration#build) configuration in the `package.json` as follows:\n    ```json\n    \"build\": {\n      \"appId\": \"your.id\",\n      \"mac\": {\n        \"category\": \"your.app.category.type\"\n      }\n    }\n    ```\n   See [all options](https://www.electron.build/configuration/configuration). Option [files](https://www.electron.build/configuration/contents#files) to indicate which files should be packed in the final application, including the entry file, maybe required.\n\n3. Add [icons](https://www.electron.build/icons).\n\n4. Add the [scripts](https://docs.npmjs.com/cli/run-script) key to the development `package.json`:\n    ```json\n    \"scripts\": {\n      \"pack\": \"electron-builder --dir\",\n      \"dist\": \"electron-builder\"\n    }\n    ```\n    Then you can run `yarn dist` (to package in a distributable format (e.g. dmg, windows installer, deb package)) or `yarn pack` (only generates the package directory without really packaging it. This is useful for testing purposes).\n\n    To ensure your native dependencies are always matched electron version, simply add script `\"postinstall\": \"electron-builder install-app-deps\"` to your `package.json`.\n\n5. If you have native addons of your own that are part of the application (not as a dependency), set [nodeGypRebuild](https://www.electron.build/configuration/configuration#Configuration-nodeGypRebuild) to `true`.\n\nPlease note that everything is packaged into an asar archive [by default](https://electron.build/configuration/configuration#Configuration-asar).\n\nFor an app that will be shipped to production, you should sign your application. See [Where to buy code signing certificates](https://www.electron.build/code-signing#where-to-buy-code-signing-certificate).\n\n## Donate\n\nWe do this open source work in our free time. If you'd like us to invest more time on it, please [donate](https://www.electron.build/donate). Donation can be used to increase some issue priority.\n\n## Sponsors\n\n<a href=\"https://workflowy.com\"><img src=\"https://workflowy.com/media/i/wf-icon-android.png\" alt=\"WorkFlowy\" title=\"WorkFlowy\" width=\"75\" height=\"75\"/></a>\n<a href=\"https://tidepool.org\"><img src=\"https://www.electron.build/sponsor-logos/Tidepool_Logo_Light.svg\" alt=\"Tidepool\" title=\"Tidepool\" /></a>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/electron-userland/electron-builder.git"
  },
  "typings": "./out/index.d.ts",
  "version": "20.41.0"
}
